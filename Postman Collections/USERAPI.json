{
	"info": {
		"_postman_id": "38982052-8b95-484e-92e5-9ccb9a6037ce",
		"name": "Mathumathi_Team4_APIAvengers_ApiBootcamp",
		"description": "USER API with below API Requests:  \nCreate User,  \nGet ALL Users,  \nGet By UserID,  \nGet By UserFirstName,  \nUpdate User,  \nDelete by UserID,  \nDelete by UserFirstName",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "GetAllUsers",
			"id": "6a7464cc-62c7-4b35-adb9-bd2051f0df63",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{BaseURL}}{{endpoint}}"
			},
			"response": []
		},
		{
			"name": "CreateUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "881c8bd8-c26c-4548-bd4c-af8784e6da51",
						"exec": [
							"",
							"var jsonData = pm.response.json();",
							"const scenarioName = pm.variables.get(\"scenario\");",
							"",
							"// If the user ID is found and the scenario is NOT \"valid create user\"",
							"if (scenarioName !== \"valid create user\" ) {",
							"    if(jsonData.user_id){",
							"        // Set dynamic environment variable",
							"        pm.environment.set(\"onetime_user_id\", jsonData.user_id);",
							"        console.log(\"one time id:\", pm.environment.get(\"onetime_user_id\"));",
							"        console.log(\"base url is\", pm.variables.get(\"BaseURL\"));",
							"        console.log(\"Scenario Name:\", scenarioName);",
							"",
							"        // Define the Authorization header once (not inside the request)",
							"        let username = pm.environment.get(\"username\");",
							"        let password = pm.environment.get(\"password\");",
							"",
							"        // Execute DeleteByUserFirstName request for cleanup",
							"        let BaseURL = pm.variables.get(\"BaseURL\");",
							"        let onetime_user_id = pm.environment.get(\"onetime_user_id\");",
							"",
							"        // Make sure the variable is set before using it in the URL",
							"        let finalUrl = `${BaseURL}/uap/deleteuser/${onetime_user_id}`;",
							"        console.log(\"Final URL: \", finalUrl);",
							"",
							"        pm.sendRequest({",
							"            url: finalUrl,",
							"            method: 'DELETE',",
							"            header: {",
							"                'Authorization': 'Basic ' + btoa(username + \":\" + password)",
							"            },",
							"            callback: function (err, res) {",
							"                if (err) {",
							"                    console.log(\"Error deleting user: \", err);",
							"                } else {",
							"                    console.log(\"User with first name \" + jsonData.user_first_name + \" has been deleted.\");",
							"                    // Log the response message from the DELETE request",
							"                    console.log(\"Response Message:\", res.body);  // Logs the response body",
							"                    console.log(\"Response Status Code:\", res.status); // Logs the status code",
							"                    console.log(\"Response Status Text:\", res.statusText); // Logs the status text",
							"                }",
							"            }",
							"        });",
							"    }",
							"    else {",
							"       console.log(\"No User ID and scenario is not valid create user\");",
							"    }",
							"}",
							"else {",
							"    // If the scenario is \"valid create user\", set the user_id and user_first_name without deletion",
							"    pm.environment.set(\"user_id\", jsonData.user_id);",
							"    pm.environment.set(\"user_first_name\", jsonData.user_first_name);",
							"",
							"    console.log(\"User ID (valid create user):\", pm.environment.get(\"user_id\"));",
							"    console.log(\"User First Name (valid create user):\", pm.environment.get(\"user_first_name\"));",
							"}",
							"",
							"//Schema Validation",
							"// Fetch the expected schema from the environment or test data",
							"var expectedSchema = pm.variables.get(\"expectedSchema\");",
							"// Perform schema validation only if expectedSchema is available and valid",
							"if (scenarioName === \"valid create user\" && expectedSchema && Object.keys(expectedSchema).length !== 0) {",
							"    pm.test(`[${scenarioName}] - Response body matches the expected schema`, function () {",
							"        pm.response.to.have.jsonSchema(expectedSchema);",
							"    });",
							"} else {",
							"    console.log(\"No expected schema found in test data.\");",
							"}",
							"",
							"",
							"if(jsonData.user_id){",
							"//Test Data Validation",
							"pm.test(`[${scenarioName}] - First name validation`, function () {",
							"    pm.expect(jsonData.user_first_name).to.eql(pm.variables.get('user_first_name'));",
							"});",
							"",
							"pm.test(`[${scenarioName}] - Last name validation`, function () {",
							"    pm.expect(jsonData.user_last_name).to.eql(pm.variables.get('user_last_name'));",
							"});",
							"",
							"var requestContactNumber = pm.request.body.raw ? JSON.parse(pm.request.body.raw).user_contact_number : null;",
							"",
							"pm.test(`[${scenarioName}] - Contact number validation`, function () {",
							"    pm.expect(jsonData.user_contact_number).to.eql(parseInt(requestContactNumber));",
							"});",
							"",
							"var requestEmailID = pm.request.body.raw ? JSON.parse(pm.request.body.raw).user_email_id : null;",
							"",
							"pm.test(`[${scenarioName}] - Email ID validation`, function () {",
							"    pm.expect(jsonData.user_email_id).to.eql(requestEmailID);",
							"});",
							"",
							"pm.test(`[${scenarioName}] - Plot Number validation`, function () {",
							"    pm.expect(jsonData.userAddress.plotNumber).to.eql(pm.variables.get('plotNumber'));",
							"});",
							"",
							"pm.test(`[${scenarioName}] - Street validation`, function () {",
							"    pm.expect(jsonData.userAddress.street).to.eql(pm.variables.get('street'));",
							"});",
							"",
							"pm.test(`[${scenarioName}] - State validation`, function () {",
							"    pm.expect(jsonData.userAddress.state).to.eql(pm.variables.get('state'));",
							"});",
							"",
							"pm.test(`[${scenarioName}] - Country validation`, function () {",
							"    pm.expect(jsonData.userAddress.country).to.eql(pm.variables.get('country'));",
							"});",
							"",
							"pm.test(`[${scenarioName}] - ZipCode validation`, function () {",
							"    pm.expect(jsonData.userAddress.zipCode).to.eql(parseInt(pm.variables.get('zipCode')));",
							"});",
							"",
							"",
							"// Check if 'user_id' is autogenerated and not null",
							"pm.test(`[${scenarioName}] - Verify 'user_id' is autogenerated`, function () {",
							"    pm.expect(jsonData).to.have.property(\"user_id\");",
							"    pm.expect(jsonData.user_id).to.not.be.null;",
							"});",
							"",
							"// Check if 'addressId' is autogenerated and not null",
							"pm.test(`[${scenarioName}] - Verify 'addressId' is autogenerated`, function () {",
							"    pm.expect(jsonData.userAddress).to.have.property(\"addressId\");",
							"    pm.expect(jsonData.userAddress.addressId).to.not.be.null;",
							"});",
							"",
							"// Check if 'creation_time' is autogenerated and not null",
							"pm.test(`[${scenarioName}] - Verify 'creation_time' is autogenerated`, function () {",
							"    pm.expect(jsonData).to.have.property(\"creation_time\");",
							"    pm.expect(jsonData.creation_time).to.not.be.null;",
							"});",
							"",
							"// Check if 'last_mod_time' is autogenerated and not null",
							"pm.test(`[${scenarioName}] - Verify 'last_mod_time' is autogenerated`, function () {",
							"    pm.expect(jsonData).to.have.property(\"last_mod_time\");",
							"    pm.expect(jsonData.last_mod_time).to.not.be.null;",
							"});",
							"}",
							"else {",
							"    console.log(\"user_id not found, skipping tests!\");",
							"}",
							"",
							"",
							"console.log(\"User ID before GET request:\", pm.environment.get(\"user_id\"));",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "7b4a675c-302e-4ba8-b63c-b6708ff2b3c1",
						"exec": [
							"let randomContactNumber = Math.floor(1000000000 + Math.random() * 9000000000).toString();",
							"pm.variables.set(\"randomContactNumber\", randomContactNumber);",
							"console.log(\"Generated Contact Number:\", randomContactNumber);",
							"",
							"let randomEmail = `user${Math.floor(Math.random() * 100000)}@test.com`;",
							"pm.variables.set(\"randomEmail\", randomEmail);",
							"console.log(\"Generated Email:\", randomEmail);",
							"",
							"if (pm.variables.get('contentType')) {",
							"    pm.request.headers.upsert({",
							"        key: \"Content-Type\",",
							"        value: variables.contentType",
							"    });",
							"    console.log(`üü¢ Content-Type set to: ${variables.contentType}`);",
							"} else {",
							"    console.log(\"‚ö†Ô∏è No Content-Type provided in test data. Keeping default.\");",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "9d6682ff-1849-4207-b574-84d863ab860c",
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\"user_first_name\":  \"{{user_first_name}}\",\n\"user_last_name\":  \"{{user_last_name}}\"        ,\n\"user_contact_number\": \"{{user_contact_number}}\"   ,\n\"user_email_id\": \"{{user_email_id}}\",\n\"userAddress\": {\n   \"plotNumber\": \"{{plotNumber}}\",\n   \"street\": \"{{street}}\",\n   \"state\": \"{{state}}\",\n    \"country\": \"{{country}}\",\n   \"zipCode\": \"{{zipCode}}\"\n }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseURL}}{{endpoint}}"
			},
			"response": []
		},
		{
			"name": "GetByUserID",
			"id": "7ff2a11b-11ff-4b3f-8e3c-65f75d7226d8",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{BaseURL}}{{endpoint}}"
			},
			"response": []
		},
		{
			"name": "GetByUserFirstName",
			"id": "ed6d84cc-4c2e-4f8f-b61c-9483b55a17f5",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{BaseURL}}{{endpoint}}"
			},
			"response": []
		},
		{
			"name": "UpdateUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "01d8b714-64ab-4598-9747-c4c000a4cdfc",
						"exec": [
							"var jsonData = pm.response.json();",
							"const scenarioName = pm.variables.get(\"scenario\");",
							"",
							"//Schema Validation",
							"// Fetch the expected schema from the environment or test data",
							"var expectedSchema = pm.variables.get(\"expectedSchema\");",
							"",
							"// Perform schema validation only if expectedSchema is available and valid",
							"if (scenarioName === \"valid update user\" && expectedSchema && Object.keys(expectedSchema).length !== 0) {",
							"    pm.test(`[${scenarioName}] - Response body matches the expected schema`, function () {",
							"        pm.response.to.have.jsonSchema(expectedSchema);",
							"    });",
							"} else {",
							"    console.log(\"No expected schema found in test data.\");",
							"}",
							"",
							"",
							"if(jsonData.user_id){",
							"//Test Data Validation",
							"pm.test(`[${scenarioName}] - First name validation`, function () {",
							"    pm.expect(jsonData.user_first_name).to.eql(pm.variables.get('user_first_name'));",
							"});",
							"",
							"pm.test(`[${scenarioName}] - Last name validation`, function () {",
							"    pm.expect(jsonData.user_last_name).to.eql(pm.variables.get('user_last_name'));",
							"});",
							"",
							"var requestContactNumber = pm.request.body.raw ? JSON.parse(pm.request.body.raw).user_contact_number : null;",
							"",
							"pm.test(`[${scenarioName}] - Contact number validation`, function () {",
							"    pm.expect(jsonData.user_contact_number).to.eql(parseInt(requestContactNumber));",
							"});",
							"",
							"var requestEmailID = pm.request.body.raw ? JSON.parse(pm.request.body.raw).user_email_id : null;",
							"",
							"pm.test(`[${scenarioName}] - Email ID validation`, function () {",
							"    pm.expect(jsonData.user_email_id).to.eql(requestEmailID);",
							"});",
							"",
							"pm.test(`[${scenarioName}] - Plot Number validation`, function () {",
							"    pm.expect(jsonData.userAddress.plotNumber).to.eql(pm.variables.get('plotNumber'));",
							"});",
							"",
							"pm.test(`[${scenarioName}] - Street validation`, function () {",
							"    pm.expect(jsonData.userAddress.street).to.eql(pm.variables.get('street'));",
							"});",
							"",
							"pm.test(`[${scenarioName}] - State validation`, function () {",
							"    pm.expect(jsonData.userAddress.state).to.eql(pm.variables.get('state'));",
							"});",
							"",
							"pm.test(`[${scenarioName}] - Country validation`, function () {",
							"    pm.expect(jsonData.userAddress.country).to.eql(pm.variables.get('country'));",
							"});",
							"",
							"pm.test(`[${scenarioName}] - ZipCode validation`, function () {",
							"    pm.expect(jsonData.userAddress.zipCode).to.eql(parseInt(pm.variables.get('zipCode')));",
							"});",
							"",
							"}",
							"else {",
							"    console.log(\"user_id not found, skipping tests!\");",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "fb96ca9d-d8bc-4a99-b7c0-c9139238c64a",
						"exec": [
							"let randomUpdateContactNumber = Math.floor(1000000000 + Math.random() * 9000000000).toString();",
							"pm.variables.set(\"randomUpdateContactNumber\", randomUpdateContactNumber);",
							"console.log(\"Generated update Contact Number:\", randomUpdateContactNumber);",
							"",
							"let randomUpdateEmail = `user${Math.floor(Math.random() * 100000)}@test.com`;",
							"pm.variables.set(\"randomUpdateEmail\", randomUpdateEmail);",
							"console.log(\"Generated Email:\", randomUpdateEmail);",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "eb103927-dd61-4c12-b652-fa7c3033ffe9",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\"user_first_name\":  \"{{user_first_name}}\",\n\"user_last_name\":  \"{{user_last_name}}\"        ,\n\"user_contact_number\": \"{{user_contact_number}}\"   ,\n\"user_email_id\": \"{{user_email_id}}\",\n\"userAddress\": {\n   \"plotNumber\": \"{{plotNumber}}\",\n   \"street\": \"{{street}}\",\n   \"state\": \"{{state}}\",\n    \"country\": \"{{country}}\",\n   \"zipCode\": \"{{zipCode}}\"\n }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseURL}}{{endpoint}}"
			},
			"response": []
		},
		{
			"name": "DeleteByUserID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "41a1d4a3-927a-4350-b8d1-8f626812b4ba",
						"exec": [
							"var jsonData = pm.response.json();",
							"console.log(jsonData.message);",
							"",
							"pm.environment.clear();"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "319ec65b-6f3d-45a6-a158-4a89e739cf00",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "DELETE",
				"header": [],
				"url": "{{BaseURL}}{{endpoint}}"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "cc5f89bf-1a32-40b2-8528-ddef28e3882d",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"",
					"//--------------Fetch Data from External JSON Data file-----------------",
					"if (typeof pm.variables.get('requestdata') !== 'object') {",
					"    pm.variables.set('requestdata', pm.iterationData.toObject());",
					"}",
					"const requestdata = pm.variables.get('requestdata');",
					"",
					"if(typeof requestdata !== 'object' || Object.keys(requestdata).length ===0) {",
					"    console.log(\"No external file found\")",
					"    return;",
					"}",
					"",
					"const currentrequest = requestdata.requests.filter(({name}) => name === pm.info.requestName) [0];",
					"if(!currentrequest){",
					"    console.log(`Request ${pm.info.requestName} has no data defined.`);",
					"}",
					"",
					"const variables = currentrequest.data.shift();",
					"Object.entries(variables).forEach(([key, value]) => {",
					"        pm.variables.set(key, value);",
					"    });",
					"",
					"pm.variables.set('requestdata',requestdata);",
					"if(currentrequest.data.length > 0){",
					"    pm.execution.setNextRequest(pm.info.requestName)",
					"}",
					"",
					"//------------------ Authorization Set Up-----------------",
					"pm.request.headers.clear(); // Clear all headers to prevent residual values",
					"pm.cookies.clear(); // Clear session cookies",
					"",
					"var AuthType = pm.variables.get(\"authType\");",
					"console.log(\"Auth Type:\", AuthType);",
					"switch (AuthType) {",
					"    case \"No Auth\":",
					"   // Ensure no Authorization header is sent",
					"    pm.request.headers.upsert({",
					"        key: 'Authorization',",
					"        value: ''",
					"    });",
					"    console.log(\"üü¢ Authorization cleared for 'no auth' scenario.\");",
					"     // Set request authorization type to No Auth",
					"        pm.request.auth = { type: 'noauth' };",
					"        console.log(\"[AUTH] No authentication required.\");",
					"        break;",
					"    case \"Basic Auth\":",
					"         let username = pm.environment.get(\"username\");",
					"        let password = pm.environment.get(\"password\");",
					"          pm.request.auth = {",
					"        type: \"basic\",",
					"        basic: { username: username, password: password }",
					"    };",
					"     console.log(\"[AUTH] Using valid Basic Auth credentials.\");",
					"     break;",
					"    case \"invalid Basic Auth\":",
					"     // Set invalid credentials",
					"    pm.request.auth = {",
					"        type: \"basic\",",
					"        basic: { username: \"numpy@gmail.com\", password: \"nnn123\" }",
					"    };",
					"    console.log(\"[AUTH] Using invalid Basic Auth credentials for testing.\");",
					"        break;",
					"    default:",
					"        console.log(\"Unknown authType: \" + AuthType); break;",
					"}",
					"  ",
					"",
					"//-------------- Set the Request Method Dynamically---------------",
					" if (variables.method) {",
					"    pm.request.method = variables.method;",
					" }",
					"",
					"",
					"",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "5e2ca4d7-e57b-493f-a801-c314642401c5",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"const scenarioName = pm.variables.get(\"scenario\");\r",
					"\r",
					"// Define a function that contains common tests to validate the API response\r",
					"var commonTests = () =>{\r",
					"    //-----------Common Test Functions--------\r",
					"// Test to validate the status code of the response\r",
					"pm.test(`[${scenarioName}] - Validating Status Code`, ()=> {\r",
					"    pm.expect(pm.response.code).to.eql(pm.variables.get(\"statusCode\"));\r",
					"});\r",
					"// Test to validate the status line (status text) of the response\r",
					"pm.test(`[${scenarioName}] - Validating Status Line`,¬†function¬†() {\r",
					"¬†¬†¬†¬†pm.expect(pm.response.status).to.eql(pm.variables.get('statusText'));\r",
					"});\r",
					"// Test to validate the Content-Type header of the response\r",
					"pm.test(`[${scenarioName}] - Content-Type header is application/json`, ()=>{\r",
					"    pm.response.to.have.header(\"Content-Type\");\r",
					"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
					"});\r",
					" // Test to check that the response time is below 3000ms\r",
					"pm.test(`[${scenarioName}] - Response time is less than 3000ms`, function () {\r",
					"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
					"});\r",
					"}\r",
					"\r",
					"// Store the common tests as a string in the environment for later execution\r",
					"pm.environment.set(\"commonTests\",commonTests.toString());\r",
					"\r",
					"\r",
					"// Now, let's validate the response using the common tests we defined above\r",
					"// Check if the response body is not empty\r",
					"if (pm.response.text() !== '') {\r",
					"    try {\r",
					"        // Try to parse the response body as JSON\r",
					"        const jsonData = pm.response.json();\r",
					"        // If the response is valid JSON, run the common tests\r",
					"        eval(pm.environment.get(\"commonTests\"))();\r",
					"    } \r",
					"    catch (e) {\r",
					"       console.log(\"Failed to parse JSON response:\", e);\r",
					"        // If the response is not valid JSON, only validate status code and status text\r",
					"        pm.test(\"Validating Status Code - \" , () => {\r",
					"            pm.expect(pm.response.code).to.eql(pm.variables.get(\"statusCode\"));\r",
					"        });\r",
					"        pm.test(\"Response status text check - \" , function () {\r",
					"            pm.expect(pm.response.status).to.eql(pm.variables.get('statusText'));\r",
					"        });\r",
					"    }\r",
					"  } \r",
					"  else {\r",
					" console.log(\"Empty response received.\");\r",
					"    // If the response is empty, log the issue and still validate the status code\r",
					"    pm.test(\"Validating Status Code - \"  , () => {\r",
					"        pm.expect(pm.response.code).to.eql(pm.variables.get(\"statusCode\"));\r",
					"    });\r",
					"  }\r",
					"\r",
					"\r",
					""
				]
			}
		}
	]
}